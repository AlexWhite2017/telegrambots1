from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
import logging
import os
import asyncio
from starlette.applications import Starlette
from starlette.routing import Route
from starlette.requests import Request
from starlette.responses import Response, PlainTextResponse
import uvicorn

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–±—Ö—É–∫–∞
# –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.environ["BOT_TOKEN"]
PORT = int(os.environ.get("PORT", 8000))
WEBHOOK_URL = os.environ.get("RENDER_EXTERNAL_URL", "") + "/webhook"

# –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram
application = Application.builder().token(TOKEN).build()

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î =====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start —Å –∫–Ω–æ–ø–∫–æ–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞"""
    user = update.effective_user
    user_name = user.full_name or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    keyboard = [
        [InlineKeyboardButton("üìö –ö–Ω–∏–∂–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞", callback_data="/books")],
        [InlineKeyboardButton("üíª –ü—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è –ü–ö", callback_data="/programs")],
        [InlineKeyboardButton("üîó –ü–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã", callback_data="/resources")],
        [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞", callback_data="/start")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_html(
        f"üöÄ –ü—Ä–∏–≤–µ—Ç, {user_name}!\n"
        "–Ø –°—Ä–µ–¥–Ω–∏–π –ù–∞—É—á–Ω—ã–π –ë–æ—Ç –∫–∞–Ω–∞–ª–∞ <b>–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>, –§—ë–¥–æ—Ä –°–µ–º—ë–Ω—ã—á!ü§ñ\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/books - –¥–æ—Å—Ç—É–ø –∫ –∫–Ω–∏–∂–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–µ\n"
        "/programs - –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è –ü–ö\n" 
        "/resources - –ø–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã\n"
        "/help - –ø–æ–º–æ—â—å –ø–æ –±–æ—Ç—É\n"
        "/profile - –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n\n"
        "üì¢ –û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª: @republic_inform",
        reply_markup=reply_markup
    )

async def books(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /books —Å HTML-—Å—Å—ã–ª–∫–∞–º–∏"""
    keyboard = [
        [InlineKeyboardButton("üíª –ü—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è –ü–ö", callback_data="/programs")],
        [InlineKeyboardButton("üîó –ü–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã", callback_data="/resources")],
        [InlineKeyboardButton("üîÑ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="/start")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    response_text = (
        "üìö <b>–ö–Ω–∏–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –†–µ—Å–ø—É–±–ª–∏–∫–∞</b>\n\n"
        "‚Ä¢ <a href='https://disk.yandex.ru/d/BX1xA5UCNxz3YA'>–û—Å–Ω–æ–≤–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞</a> - 5000+ –∫–Ω–∏–≥\n"
        "‚Ä¢ <a href='https://disk.yandex.ru/d/d5cAK6TBCJSa_Q'>–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–Ω–∏–≥—É</a> (—Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è)\n"
        "‚Ä¢ <a href='https://disk.yandex.ru/d/BX1xA5UCNxz3YA?sort=modified'>–ù–æ–≤–∏–Ω–∫–∏</a> - –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏\n\n"
        "üîê <i>–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–Ω–∏–≥–∞–º —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å –æ—Ç –∞—Ä—Ö–∏–≤–∞</i>\n"
        "üí° –ü–∞—Ä–æ–ª—å –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∫–∞–Ω–∞–ª–µ: @republic_inform"
    )
    await update.message.reply_html(response_text, 
                                  reply_markup=reply_markup,
                                  disable_web_page_preview=True)

async def programs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /programs - –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è –ü–ö"""
    keyboard = [
        [InlineKeyboardButton("üìö –ö–Ω–∏–∂–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞", callback_data="/books")],
        [InlineKeyboardButton("üîó –ü–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã", callback_data="/resources")],
        [InlineKeyboardButton("üîÑ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="/start")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    response_text = (
        "üíª <b>–ü–æ–ª–µ–∑–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è –ü–ö</b>\n\n"
        "‚Ä¢ <a href='https://diakov.net/'>Diakov.net</a> - –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏ —Ä–µ–ø–∞–∫–∏\n"
        "‚Ä¢ <a href='https://repack.me/'>Repack.me</a> - —Ä–µ–ø–∞–∫–∏ –∏–≥—Ä –∏ –ø—Ä–æ–≥—Ä–∞–º–º\n"
        "‚Ä¢ <a href='https://rutracker.org/'>RuTracker</a> - —Ç–æ—Ä—Ä–µ–Ω—Ç-—Ç—Ä–µ–∫–µ—Ä\n"
        "‚Ä¢ <a href='https://www.softportal.com/'>SoftPortal</a> - —Å–æ—Ñ—Ç –ø–æ—Ä—Ç–∞–ª\n\n"
        "‚ö†Ô∏è <i>–°–∫–∞—á–∏–≤–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã —Ç–æ–ª—å–∫–æ –∏–∑ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤!</i>"
    )
    await update.message.reply_html(response_text, 
                                  reply_markup=reply_markup,
                                  disable_web_page_preview=True)

async def resources(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /resources - –ø–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã"""
    keyboard = [
        [InlineKeyboardButton("üìö –ö–Ω–∏–∂–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞", callback_data="/books")],
        [InlineKeyboardButton("üíª –ü—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è –ü–ö", callback_data="/programs")],
        [InlineKeyboardButton("üîÑ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="/start")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    response_text = (
        "üîó <b>–ü–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã</b>\n\n"
        "üéì <b>–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:</b>\n"
        "‚Ä¢ <a href='https://stepik.org/'>Stepik</a> - –æ–Ω–ª–∞–π–Ω-–∫—É—Ä—Å—ã\n"
        "‚Ä¢ <a href='https://openedu.ru/'>–û—Ç–∫—Ä—ã—Ç–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ</a>\n"
        "‚Ä¢ <a href='https://arzamas.academy/'>–ê—Ä–∑–∞–º–∞—Å</a> - –≥—É–º–∞–Ω–∏—Ç–∞—Ä–Ω—ã–µ –∫—É—Ä—Å—ã\n\n"
        "üìö <b>–ö–Ω–∏–≥–∏:</b>\n"
        "‚Ä¢ <a href='https://flibusta.is/'>–§–ª–∏–±—É—Å—Ç–∞</a> - —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞\n"
        "‚Ä¢ <a href='https://libgen.is/'>LibGen</a> - –Ω–∞—É—á–Ω–∞—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞\n\n"
        "üíª <b>IT –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ:</b>\n"
        "‚Ä¢ <a href='https://github.com/'>GitHub</a> - –∫–æ–¥ –∏ –ø—Ä–æ–µ–∫—Ç—ã\n"
        "‚Ä¢ <a href='https://stackoverflow.com/'>Stack Overflow</a> - –ø–æ–º–æ—â—å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞–º\n"
        "‚Ä¢ <a href='https://habr.com/'>Habr</a> - IT-—Å–æ–æ–±—â–µ—Å—Ç–≤–æ\n\n"
        "üõ†Ô∏è <b>–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:</b>\n"
        "‚Ä¢ <a href='https://notion.so/'>Notion</a> - –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã\n"
        "‚Ä¢ <a href='https://trello.com/'>Trello</a> - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏"
    )
    await update.message.reply_html(response_text, 
                                  reply_markup=reply_markup,
                                  disable_web_page_preview=True)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help —Å –∫–Ω–æ–ø–∫–æ–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞"""
    keyboard = [
        [InlineKeyboardButton("üìö –ö–Ω–∏–≥–∏", callback_data="/books")],
        [InlineKeyboardButton("üíª –ü—Ä–æ–≥—Ä–∞–º–º—ã", callback_data="/programs")],
        [InlineKeyboardButton("üîó –†–µ—Å—É—Ä—Å—ã", callback_data="/resources")],
        [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞", callback_data="/start")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    help_text = (
        "‚ÑπÔ∏è <b>–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É –§—ë–¥–æ—Ä –°–µ–º—ë–Ω—ã—á</b>\n\n"
        "üìö <u>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã</u>:\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/books - –¥–æ—Å—Ç—É–ø –∫ –∫–Ω–∏–∂–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–µ\n"
        "/programs - –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è –ü–ö\n"
        "/resources - –ø–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã\n"
        "/profile - –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n"
        "/settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞\n\n"
        "üîó <u>–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏</u>:\n"
        "‚Ä¢ –û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª: @republic_inform\n"
        "‚Ä¢ –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: @Alex_De_White\n"
        "‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞: @Alex_De_White\n\n"
        "üí° –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É"
    )
    await update.message.reply_html(help_text, reply_markup=reply_markup)

async def settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /settings"""
    keyboard = [
        [InlineKeyboardButton("üìö –ö–Ω–∏–≥–∏", callback_data="/books")],
        [InlineKeyboardButton("üíª –ü—Ä–æ–≥—Ä–∞–º–º—ã", callback_data="/programs")],
        [InlineKeyboardButton("üîÑ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="/start")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_html(
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</b>\n\n"
        "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –≤–∫–ª—é—á–µ–Ω—ã\n"
        "üåê –Ø–∑—ã–∫: —Ä—É—Å—Å–∫–∏–π\n"
        "üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è\n\n"
        "‚ö° –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
        reply_markup=reply_markup
    )

async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /profile"""
    user = update.effective_user
    user_name = user.full_name or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    username = f"@{user.username}" if user.username else "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    
    keyboard = [
        [InlineKeyboardButton("üìö –ö–Ω–∏–≥–∏", callback_data="/books")],
        [InlineKeyboardButton("üíª –ü—Ä–æ–≥—Ä–∞–º–º—ã", callback_data="/programs")],
        [InlineKeyboardButton("üîÑ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="/start")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    profile_text = (
        f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
        f"üÜî ID: <code>{user.id}</code>\n"
        f"üë§ –ò–º—è: {user_name}\n"
        f"üîó Username: {username}\n\n"
        f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: 2025-08-10\n"
        f"‚≠ê –°—Ç–∞—Ç—É—Å: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å\n\n"
        f"üìö –ö–Ω–∏–≥ —Å–∫–∞—á–∞–Ω–æ: 0\n"
        f"üéÅ –ü—Ä–µ–º–∏—É–º: –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω"
    )
    await update.message.reply_html(profile_text, reply_markup=reply_markup)

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–û–ö =====
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ in-line –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "/start":
        user = update.effective_user
        user_name = user.full_name or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        keyboard = [
            [InlineKeyboardButton("üìö –ö–Ω–∏–∂–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞", callback_data="/books")],
            [InlineKeyboardButton("üíª –ü—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è –ü–ö", callback_data="/programs")],
            [InlineKeyboardButton("üîó –ü–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã", callback_data="/resources")],
            [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞", callback_data="/start")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"üöÄ –ü—Ä–∏–≤–µ—Ç, {user_name}!\n"
            "–Ø –°—Ä–µ–¥–Ω–∏–π –ù–∞—É—á–Ω—ã–π –ë–æ—Ç –∫–∞–Ω–∞–ª–∞ <b>–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>, –§—ë–¥–æ—Ä –°–µ–º—ë–Ω—ã—á!ü§ñ\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/books - –¥–æ—Å—Ç—É–ø –∫ –∫–Ω–∏–∂–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–µ\n"
            "/programs - –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è –ü–ö\n"
            "/resources - –ø–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã\n"
            "/help - –ø–æ–º–æ—â—å –ø–æ –±–æ—Ç—É\n"
            "/profile - –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n\n"
            "üì¢ –û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª: @republic_inform",
            parse_mode='HTML',
            reply_markup=reply_markup
        )
    
    elif query.data == "/books":
        keyboard = [
            [InlineKeyboardButton("üíª –ü—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è –ü–ö", callback_data="/programs")],
            [InlineKeyboardButton("üîó –ü–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã", callback_data="/resources")],
            [InlineKeyboardButton("üîÑ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="/start")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        response_text = (
            "üìö <b>–ö–Ω–∏–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –†–µ—Å–ø—É–±–ª–∏–∫–∞</b>\n\n"
            "‚Ä¢ <a href='https://disk.yandex.ru/d/BX1xA5UCNxz3YA'>–û—Å–Ω–æ–≤–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞</a> - 5000+ –∫–Ω–∏–≥\n"
            "‚Ä¢ <a href='https://disk.yandex.ru/d/d5cAK6TBCJSa_Q'>–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–Ω–∏–≥—É</a> (—Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è)\n"
            "‚Ä¢ <a href='https://disk.yandex.ru/d/BX1xA5UCNxz3YA?sort=modified'>–ù–æ–≤–∏–Ω–∫–∏</a> - –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏\n\n"
            "üîê <i>–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–Ω–∏–≥–∞–º —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å –æ—Ç –∞—Ä—Ö–∏–≤–∞</i>\n"
            "üí° –ü–∞—Ä–æ–ª—å –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∫–∞–Ω–∞–ª–µ: @republic_inform"
        )
        await query.edit_message_text(
            response_text,
            parse_mode='HTML',
            reply_markup=reply_markup,
            disable_web_page_preview=True
        )
    
    elif query.data == "/programs":
        keyboard = [
            [InlineKeyboardButton("üìö –ö–Ω–∏–∂–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞", callback_data="/books")],
            [InlineKeyboardButton("üîó –ü–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã", callback_data="/resources")],
            [InlineKeyboardButton("üîÑ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="/start")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        response_text = (
            "üíª <b>–ü–æ–ª–µ–∑–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è –ü–ö</b>\n\n"
            "‚Ä¢ <a href='https://diakov.net/'>Diakov.net</a> - –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏ —Ä–µ–ø–∞–∫–∏\n"
            "‚Ä¢ <a href='https://repack.me/'>Repack.me</a> - —Ä–µ–ø–∞–∫–∏ –∏–≥—Ä –∏ –ø—Ä–æ–≥—Ä–∞–º–º\n"
            "‚Ä¢ <a href='https://rutracker.org/'>RuTracker</a> - —Ç–æ—Ä—Ä–µ–Ω—Ç-—Ç—Ä–µ–∫–µ—Ä\n"
            "‚Ä¢ <a href='https://www.softportal.com/'>SoftPortal</a> - —Å–æ—Ñ—Ç –ø–æ—Ä—Ç–∞–ª\n\n"
            "‚ö†Ô∏è <i>–°–∫–∞—á–∏–≤–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã —Ç–æ–ª—å–∫–æ –∏–∑ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤!</i>"
        )
        await query.edit_message_text(
            response_text,
            parse_mode='HTML',
            reply_markup=reply_markup,
            disable_web_page_preview=True
        )
    
    elif query.data == "/resources":
        keyboard = [
            [InlineKeyboardButton("üìö –ö–Ω–∏–∂–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞", callback_data="/books")],
            [InlineKeyboardButton("üíª –ü—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è –ü–ö", callback_data="/programs")],
            [InlineKeyboardButton("üîÑ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="/start")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        response_text = (
            "üîó <b>–ü–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã</b>\n\n"
            "üéì <b>–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:</b>\n"
            "‚Ä¢ <a href='https://stepik.org/'>Stepik</a> - –æ–Ω–ª–∞–π–Ω-–∫—É—Ä—Å—ã\n"
            "‚Ä¢ <a href='https://openedu.ru/'>–û—Ç–∫—Ä—ã—Ç–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ</a>\n"
            "‚Ä¢ <a href='https://arzamas.academy/'>–ê—Ä–∑–∞–º–∞—Å</a> - –≥—É–º–∞–Ω–∏—Ç–∞—Ä–Ω—ã–µ –∫—É—Ä—Å—ã\n\n"
            "üìö <b>–ö–Ω–∏–≥–∏:</b>\n"
            "‚Ä¢ <a href='https://flibusta.is/'>–§–ª–∏–±—É—Å—Ç–∞</a> - —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞\n"
            "‚Ä¢ <a href='https://libgen.is/'>LibGen</a> - –Ω–∞—É—á–Ω–∞—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞\n\n"
            "üíª <b>IT –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ:</b>\n"
            "‚Ä¢ <a href='https://github.com/'>GitHub</a> - –∫–æ–¥ –∏ –ø—Ä–æ–µ–∫—Ç—ã\n"
            "‚Ä¢ <a href='https://stackoverflow.com/'>Stack Overflow</a> - –ø–æ–º–æ—â—å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞–º\n"
            "‚Ä¢ <a href='https://habr.com/'>Habr</a> - IT-—Å–æ–æ–±—â–µ—Å—Ç–≤–æ\n\n"
            "üõ†Ô∏è <b>–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:</b>\n"
            "‚Ä¢ <a href='https://notion.so/'>Notion</a> - –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã\n"
            "‚Ä¢ <a href='https://trello.com/'>Trello</a> - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏"
        )
        await query.edit_message_text(
            response_text,
            parse_mode='HTML',
            reply_markup=reply_markup,
            disable_web_page_preview=True
        )

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–®–ò–ë–û–ö =====
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    """–õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏"""
    logger.error(msg="–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã:", exc_info=True)
    
    if update and isinstance(update, Update) and update.message:
        await update.message.reply_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É @Alex_De_White"
        )

# ===== –í–ï–ë–•–£–ö –≠–ù–î–ü–û–ò–ù–¢–´ =====
async def webhook(request: Request) -> Response:
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤ –æ—Ç Telegram"""
    try:
        data = await request.json()
        update = Update.de_json(data, application.bot)
        await application.update_queue.put(update)
        return Response()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –≤–µ–±—Ö—É–∫–µ: {e}")
        return Response(status_code=500)

async def health_check(request: Request) -> PlainTextResponse:
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è Render)"""
    return PlainTextResponse("OK")

async def set_webhook():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    if WEBHOOK_URL:
        await application.bot.set_webhook(url=f"{WEBHOOK_URL}")
        logger.info(f"–í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
    else:
        logger.warning("RENDER_EXTERNAL_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –≤–µ–±—Ö—É–∫ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

# ===== –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í =====
def setup_handlers():
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("books", books))
    application.add_handler(CommandHandler("programs", programs))
    application.add_handler(CommandHandler("resources", resources))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("settings", settings))
    application.add_handler(CommandHandler("profile", profile))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_error_handler(error_handler)

# ===== –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø =====
async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å –≤–µ–±—Ö—É–∫–∞–º–∏...")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    setup_handlers()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    await application.initialize()
    await application.start()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫
    await set_webhook()
    
    # –°–æ–∑–¥–∞–µ–º Starlette –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    starlette_app = Starlette(routes=[
        Route("/webhook", webhook, methods=["POST"]),
        Route("/healthcheck", health_check, methods=["GET"]),
        Route("/", health_check, methods=["GET"]),  # –ö–æ—Ä–Ω–µ–≤–æ–π –ø—É—Ç—å —Ç–æ–∂–µ –¥–ª—è health check
    ])
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    config = uvicorn.Config(
        app=starlette_app,
        host="0.0.0.0",
        port=PORT,
        log_level="info"
    )
    server = uvicorn.Server(config)
    
    logger.info(f"ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {PORT}. –û–∂–∏–¥–∞–Ω–∏–µ –≤–µ–±—Ö—É–∫–æ–≤...")
    await server.serve()

# ===== –¢–û–ß–ö–ê –í–•–û–î–ê =====
if __name__ == "__main__":
    asyncio.run(main())
