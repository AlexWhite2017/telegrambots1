import os
import logging
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from bs4 import BeautifulSoup
import asyncio
from starlette.applications import Starlette
from starlette.routing import Route
from starlette.requests import Request
from starlette.responses import Response, PlainTextResponse
import uvicorn

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–±—Ö—É–∫–∞ –¥–ª—è Render
TOKEN = os.environ["BOT_TOKEN"]  # –¢–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
PORT = int(os.environ.get("PORT", 8000))
WEBHOOK_URL = os.environ.get("RENDER_EXTERNAL_URL", "") + "/webhook"

# –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram
application = Application.builder().token(TOKEN).build()

class NewsParser:
    """–ü–∞—Ä—Å–µ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
    
    def __init__(self):
        self.headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        }
    
    def parse_ria_news(self, max_news: int = 5) -> list:
        """–ü–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤–æ—Å—Ç–µ–π —Å RIA.ru - —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏"""
        try:
            url = "https://ria.ru/"
            response = requests.get(url, headers=self.headers, timeout=10)
            soup = BeautifulSoup(response.text, 'html.parser')
            
            news_items = []
            # –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è RIA.ru
            articles = soup.select('a.cell-list__item-link, a.list-item__content')[:max_news]
            
            for article in articles:
                try:
                    title_elem = article.select_one('.cell-list__item-title, .list-item__title')
                    if title_elem:
                        title = title_elem.get_text(strip=True)
                        link = article.get('href', '')
                        if link and not link.startswith('http'):
                            link = 'https://ria.ru' + link
                        
                        news_items.append({
                            'title': title,
                            'link': link,
                            'source': 'RIA –ù–æ–≤–æ—Å—Ç–∏'
                        })
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ RIA: {e}")
                    continue
            
            return news_items
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ RIA: {e}")
            return []
    
    def parse_tass_news(self, max_news: int = 5) -> list:
        """–ü–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤–æ—Å—Ç–µ–π —Å TASS.ru - –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ –∞–≥–µ–Ω—Ç—Å—Ç–≤–æ"""
        try:
            url = "https://tass.ru/"
            response = requests.get(url, headers=self.headers, timeout=10)
            soup = BeautifulSoup(response.text, 'html.parser')
            
            news_items = []
            articles = soup.select('.news-line__item, .news-card')[:max_news]
            
            for article in articles:
                try:
                    title_elem = article.select_one('.news-line__item-title, .news-card__title')
                    if title_elem:
                        title = title_elem.get_text(strip=True)
                        link_elem = article.find('a')
                        link = link_elem.get('href', '') if link_elem else ''
                        if link and not link.startswith('http'):
                            link = 'https://tass.ru' + link
                        
                        news_items.append({
                            'title': title,
                            'link': link,
                            'source': '–¢–ê–°–°'
                        })
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¢–ê–°–°: {e}")
                    continue
            
            return news_items
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¢–ê–°–°: {e}")
            return []
    
    def parse_belpressa_news(self, max_news: int = 5) -> list:
        """–ü–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤–æ—Å—Ç–µ–π –ë–µ–ª–≥–æ—Ä–æ–¥–∞ —Å Belpressa.ru"""
        try:
            url = "https://www.belpressa.ru/news/"
            response = requests.get(url, headers=self.headers, timeout=10)
            soup = BeautifulSoup(response.text, 'html.parser')
            
            news_items = []
            articles = soup.select('.news-list-item, .news-item')[:max_news]
            
            for article in articles:
                try:
                    title_elem = article.select_one('h2, .news-title, .title')
                    if title_elem:
                        title = title_elem.get_text(strip=True)
                        link_elem = article.find('a')
                        link = link_elem.get('href', '') if link_elem else ''
                        if link and not link.startswith('http'):
                            link = 'https://www.belpressa.ru' + link
                        
                        news_items.append({
                            'title': title,
                            'link': link,
                            'source': '–ë–µ–ª–ü—Ä–µ—Å—Å–∞'
                        })
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ë–µ–ª–ü—Ä–µ—Å—Å–∞: {e}")
                    continue
            
            return news_items
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ë–µ–ª–ü—Ä–µ—Å—Å–∞: {e}")
            return []
    
    def parse_belru_news(self, max_news: int = 5) -> list:
        """–ü–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤–æ—Å—Ç–µ–π –ë–µ–ª–≥–æ—Ä–æ–¥–∞ —Å Bel.ru"""
        try:
            url = "https://www.bel.ru/news/"
            response = requests.get(url, headers=self.headers, timeout=10)
            soup = BeautifulSoup(response.text, 'html.parser')
            
            news_items = []
            articles = soup.select('.news-item, .article-item')[:max_news]
            
            for article in articles:
                try:
                    title_elem = article.select_one('.news-title, .title, h3')
                    if title_elem:
                        title = title_elem.get_text(strip=True)
                        link_elem = article.find('a')
                        link = link_elem.get('href', '') if link_elem else ''
                        if link and not link.startswith('http'):
                            link = 'https://www.bel.ru' + link
                        
                        news_items.append({
                            'title': title,
                            'link': link,
                            'source': '–ë–µ–ª.–†—É'
                        })
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ë–µ–ª.–†—É: {e}")
                    continue
            
            return news_items
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ë–µ–ª.–†—É: {e}")
            return []

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–∞—Ä—Å–µ—Ä–∞
news_parser = NewsParser()

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î –¢–ï–õ–ï–ì–†–ê–ú =====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    keyboard = [
        [InlineKeyboardButton("üá∑üá∫ –§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏", callback_data="federal_news")],
        [InlineKeyboardButton("üèôÔ∏è –ù–æ–≤–æ—Å—Ç–∏ –ë–µ–ª–≥–æ—Ä–æ–¥–∞", callback_data="belgorod_news")],
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏", callback_data="refresh_news")],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üì∞ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ù–æ–≤–æ—Å—Ç–Ω–æ–π –ë–æ—Ç!*\n\n"
        "–Ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏:\n"
        "‚Ä¢ üá∑üá∫ –§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –†–æ—Å—Å–∏–∏\n"
        "‚Ä¢ üèôÔ∏è –ù–æ–≤–æ—Å—Ç–∏ –ë–µ–ª–≥–æ—Ä–æ–¥–∞ –∏ –æ–±–ª–∞—Å—Ç–∏\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–æ–≤–æ—Å—Ç–µ–π:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "‚ÑπÔ∏è *–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É*\n\n"
        "*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/news - –ø–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏\n"
        "/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
        "*–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π:*\n"
        "‚Ä¢ RIA –ù–æ–≤–æ—Å—Ç–∏\n"
        "‚Ä¢ –¢–ê–°–°\n"
        "‚Ä¢ –ë–µ–ª–ü—Ä–µ—Å—Å–∞\n"
        "‚Ä¢ –ë–µ–ª.–†—É\n\n"
        "üîÑ –ù–æ–≤–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—Ä–æ—Å–µ"
    )
    await update.message.reply_text(help_text, parse_mode='Markdown')

async def news_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /news"""
    keyboard = [
        [InlineKeyboardButton("üá∑üá∫ –§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏", callback_data="federal_news")],
        [InlineKeyboardButton("üèôÔ∏è –ù–æ–≤–æ—Å—Ç–∏ –ë–µ–ª–≥–æ—Ä–æ–¥–∞", callback_data="belgorod_news")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üì∞ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–æ–≤–æ—Å—Ç–µ–π:",
        reply_markup=reply_markup
    )

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–û–ö =====
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    data = query.data
    
    if data == "federal_news":
        await send_federal_news(query)
    elif data == "belgorod_news":
        await send_belgorod_news(query)
    elif data == "refresh_news":
        await refresh_news_menu(query)
    elif data == "help":
        await show_help(query)

async def send_federal_news(query):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π"""
    await query.edit_message_text("üì° –ó–∞–≥—Ä—É–∂–∞—é —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏...")
    
    # –ü–∞—Ä—Å–∏–º –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    ria_news = news_parser.parse_ria_news(3)
    tass_news = news_parser.parse_tass_news(3)
    
    all_news = ria_news + tass_news
    
    if not all_news:
        message = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    else:
        message = "üá∑üá∫ *–§–ï–î–ï–†–ê–õ–¨–ù–´–ï –ù–û–í–û–°–¢–ò*\n\n"
        for i, news in enumerate(all_news[:6], 1):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 6 –Ω–æ–≤–æ—Å—Ç—è–º–∏
            message += f"{i}. [{news['source']}] {news['title']}\n"
            message += f"   üîó [–ß–∏—Ç–∞—Ç—å]({news['link']})\n\n"
    
    keyboard = [
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="federal_news")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="refresh_news")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        message,
        reply_markup=reply_markup,
        parse_mode='Markdown',
        disable_web_page_preview=False
    )

async def send_belgorod_news(query):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –ë–µ–ª–≥–æ—Ä–æ–¥–∞"""
    await query.edit_message_text("üì° –ó–∞–≥—Ä—É–∂–∞—é –Ω–æ–≤–æ—Å—Ç–∏ –ë–µ–ª–≥–æ—Ä–æ–¥–∞...")
    
    # –ü–∞—Ä—Å–∏–º –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –±–µ–ª–≥–æ—Ä–æ–¥—Å–∫–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    belpressa_news = news_parser.parse_belpressa_news(4)
    belru_news = news_parser.parse_belru_news(4)
    
    all_news = belpressa_news + belru_news
    
    if not all_news:
        message = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –ë–µ–ª–≥–æ—Ä–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    else:
        message = "üèôÔ∏è *–ù–û–í–û–°–¢–ò –ë–ï–õ–ì–û–†–û–î–ê –ò –û–ë–õ–ê–°–¢–ò*\n\n"
        for i, news in enumerate(all_news[:8], 1):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 8 –Ω–æ–≤–æ—Å—Ç—è–º–∏
            message += f"{i}. [{news['source']}] {news['title']}\n"
            message += f"   üîó [–ß–∏—Ç–∞—Ç—å]({news['link']})\n\n"
    
    keyboard = [
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="belgorod_news")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="refresh_news")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        message,
        reply_markup=reply_markup,
        parse_mode='Markdown',
        disable_web_page_preview=False
    )

async def refresh_news_menu(query):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    keyboard = [
        [InlineKeyboardButton("üá∑üá∫ –§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏", callback_data="federal_news")],
        [InlineKeyboardButton("üèôÔ∏è –ù–æ–≤–æ—Å—Ç–∏ –ë–µ–ª–≥–æ—Ä–æ–¥–∞", callback_data="belgorod_news")],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üì∞ *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–æ–≤–æ—Å—Ç–µ–π:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def show_help(query):
    """–ü–æ–∫–∞–∑ —Å–ø—Ä–∞–≤–∫–∏"""
    help_text = (
        "‚ÑπÔ∏è *–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É*\n\n"
        "*–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π:*\n"
        "‚Ä¢ RIA –ù–æ–≤–æ—Å—Ç–∏ - —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–µ\n"
        "‚Ä¢ –¢–ê–°–° - —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–µ\n"
        "‚Ä¢ –ë–µ–ª–ü—Ä–µ—Å—Å–∞ - –ë–µ–ª–≥–æ—Ä–æ–¥\n"
        "‚Ä¢ –ë–µ–ª.–†—É - –ë–µ–ª–≥–æ—Ä–æ–¥\n\n"
        "*–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*\n"
        "1. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–æ–≤–æ—Å—Ç–µ–π\n"
        "2. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –¥–ª—è —á—Ç–µ–Ω–∏—è\n"
        "3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å' –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π\n\n"
        "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @Alex_De_White"
    )
    
    keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="refresh_news")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        help_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

# ===== –í–ï–ë–•–£–ö –≠–ù–î–ü–û–ò–ù–¢–´ –î–õ–Ø RENDER =====
async def webhook(request: Request) -> Response:
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤ –æ—Ç Telegram"""
    try:
        data = await request.json()
        update = Update.de_json(data, application.bot)
        await application.update_queue.put(update)
        return Response()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –≤–µ–±—Ö—É–∫–µ: {e}")
        return Response(status_code=500)

async def health_check(request: Request) -> PlainTextResponse:
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    return PlainTextResponse("OK")

async def set_webhook():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    if WEBHOOK_URL:
        await application.bot.set_webhook(url=f"{WEBHOOK_URL}")
        logger.info(f"–í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
    else:
        logger.warning("RENDER_EXTERNAL_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –≤–µ–±—Ö—É–∫ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

# ===== –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í =====
def setup_handlers():
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("news", news_command))
    application.add_handler(CallbackQueryHandler(button_handler))

# ===== –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø =====
async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –±–æ—Ç–∞...")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    setup_handlers()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    await application.initialize()
    await application.start()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫
    await set_webhook()
    
    # –°–æ–∑–¥–∞–µ–º Starlette –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    starlette_app = Starlette(routes=[
        Route("/webhook", webhook, methods=["POST"]),
        Route("/healthcheck", health_check, methods=["GET"]),
        Route("/", health_check, methods=["GET"]),
    ])
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    config = uvicorn.Config(
        app=starlette_app,
        host="0.0.0.0",
        port=PORT,
        log_level="info"
    )
    server = uvicorn.Server(config)
    
    logger.info(f"ü§ñ –ù–æ–≤–æ—Å—Ç–Ω–æ–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
    await server.serve()

if __name__ == "__main__":
    asyncio.run(main())
